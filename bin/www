// Module dependencies
const app = require('../app');
const http = require('http');
const { app: debugLog, error: debugErrorLog, game: debugGameLog } = require('../utils/logger');


app.set('port', process.env.PORT || 3000);  // Default to port 3000

// Normalize a port into a number, string, or false
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

// Create and normalize port value
const port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

// Create HTTP server
const server = http.createServer(app);

// Error Event Handler
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
      case 'EACCES':
          debugErrorLog(bind + ' requires elevated privileges');
          process.exit(1);
      case 'EADDRINUSE':
          debugErrorLog(bind + ' is already in use');
          process.exit(1);
      default:
          throw error;
  }
}

// Listening Event Handler
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debugLog('Listening on ' + bind);
  debugLog('Server running on port ' + port);
}

// Initialize WebSocket
if (app.initializeWebSocket) {
  app.initializeWebSocket(server);
}

// Single server start with all necessary setup
server.listen(port, async () => {
  debugLog('Unicity demo server starting on port ' + server.address().port);
  
  // Initialize any startup tasks
  if (app.onStartup) {
      try {
          await app.onStartup();
          debugLog('Unicity demo server startup complete.');
      } catch (error) {
          debugErrorLog('Startup error:', error);
          process.exit(1);
      }
  }
});

// Attach event listeners
server.on('error', onError);
server.on('listening', onListening);


